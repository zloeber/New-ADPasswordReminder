#Requires -Version 2.0 
<# 
.SYNOPSIS
    Notifies users that their password is about to expire.

.DESCRIPTION
    Let's users know their password will soon expire. Details the steps needed to change their password, and advises on what the password policy requires. Accounts for both standard Default Domain Policy based password policy and the fine grain password policy available in 2008 domains.

.NOTES
    Version -
        3.0 - Updated from original code to include:
                Eliminated all tabs for spaces in the code (because I'm weird like that)
                Added options for passing the days to expire and other variables that were static in the previous version
                Added SurpressFinalNotice switch for testing purposes
                Removed global variables because they are bad
                Simplified the email content creation (and thus modification to suit your needs)
                Changed the logic to assume exact matching for the days to expire and added a 'LooseMatching' option for the old behavior
                Eliminated the automatic installation of AD module feature because that seems creepy to me
                Eliminated the imageless option (simply set your image path as an empty string instead if you will not be hosting images for your notifications)
                Added ability to schedule a job and use the passed variables to create the parameters being used in the scheduled task
                Embedded the gifs used for the emails into the script for extraction with the -ExtractGifs switch
                Added flag and code for adding the user used for installing as a scheduled task to the local 'login as batch job' right
                Removed reference to http://www.passwordmeter.com/ as it seems weird to put in a password you plan on using through unencrypted channels
                Converted most write-host to write-output or write-verbose
                Added parametersets
                Added more detail to event logs (including whom was notified and more job information)

        2.9 - See changelog at http://www.ehloworld.com/596

    Authors -
        M. Ali (original AD query)
        Pat Richard, Lync MVP
        Zachary Loeber (this version)

.LINK     
    http://www.ehloworld.com/318 (original script)

.LINK
    http://www.the-little-things.net (this version)

.INPUTS
    None. You cannot pipe objects to this script

.PARAMETER Demo
    Runs the script in demo mode. No emails are sent to the user(s), and onscreen output includes those who are expiring soon.
.PARAMETER PreviewUser
    Process a single user account as if their password will expire in 1 day. Use with DaysToWarn = 1 or LooseMatching to send an example notice to the user.
.PARAMETER LooseMatching
    Use this switch to send notices if the expiration date is less than or equal to the days to warn. Default is to only send a notice if the DaysToWarn exactly matches the number of days until the password expires.
.PARAMETER Install
    Create the scheduled task to run the script daily.
.PARAMETER SetupRunAsBatch
    Only useful if installing as a scheduled task. This switch will attempt to add the user account the local 'login as batch job' rights. (Note: You need to have the .net 3.5 feature installed for this to work.)
.PARAMETER Credential
    Only used if installing the script as a scheduled task. This will be used as the credentials for the scheduled task.
.PARAMETER ExtractGifs
    Extract embedded gifs used in the email notification. These should then be moved to a publicly available server.
.PARAMETER Alert
    Send the notice as an alert (red) instead of a warning (yellow). This makes no difference if you are not using the images.
.PARAMETER DaysToWarn
    How many days before the password expiration should a notice be sent? Defaults to 7 days.
.PARAMETER OU
    Can be used to filter checked user accounts to a specific organizational unit. Defaults to entire domain.
.PARAMETER SurpressFinalNotice
    Default behavior is to add a red final notice banner to emails if there is only 1 day until the password expires. This option surpresses that banner.
.PARAMETER Company
    Your company name
.PARAMETER PasswordChangeURL
    This can be an owa password change url or possibly an sso password change url
.PARAMETER EmailServer
    Your email relay
.PARAMETER EmailFrom
    Where the email is seen to come from
.PARAMETER HelpDeskPhone
    Your helpdesk phone number. Leave blank to exlcude from email notifications
.PARAMETER HelpDeskURL
    Web URL of your helpdesk system. Leave blank to exclude from email notifications.
.PARAMETER ImagePathBelow
    Path should be accessible by ALL users who may receive emails. This includes external/mobile users. Leave blank to send emails without images.

.EXAMPLE 
    .\New-ADPasswordReminder.ps1 -ExtractGifs
    
    Description
    --------------
    Extract the embedded gifs used in the notifications generated by this script. These should be then moved over to a publicly available web server.

.EXAMPLE 
    .\New-ADPasswordReminder.ps1 -Demo -DaysToWarn 5
    
    Description
    --------------
    Searches Active Directory for users who have passwords expiring in 5 days, and lists those users on the screen, along with days till expiration and policy setting

.EXAMPLE 
     .\New-ADPasswordReminder.ps1 -DaysToWarn 7 -Demo -LooseMatching

    Description
    --------------
    Query AD for any accounts with passwords that will expire in 7 days or less and print them to the screen.

.EXAMPLE 
     .\New-ADPasswordReminder.ps1 -DaysToWarn 7 -Demo

    Description
    --------------
    Query AD for any accounts with passwords that will expire in EXACTLY 7 days and print them to the screen.

.EXAMPLE
    .\New-ADPasswordReminder.ps1  -Alert -PreviewUser 'jdoe' -Company 'Contoso' -PasswordChangeURL 'https://sso.contoso.com/adfs/portal/updatepassword/' -EmailServer 'smtprelay.contoso.com' -EmailFrom 'IT ServiceDesk <servicedesk@contoso.com>' -HelpDeskPhone '(555) 555-5555' -ImagePath 'https://www.contoso.com/notices' -Install

    Description
    --------------
    Create a new scheduled task test for the jdoe user. This will automatically assume that jdoe's password changes in a day and send a red (alert) email notification.

.EXAMPLE
    $MyCred = Get-Credential
    .\New-ADPasswordReminder.ps1 -Company 'Contoso' -PasswordChangeURL 'https://sso.contoso.com/adfs/portal/updatepassword/' -EmailServer 'smtprelay.contoso.com' -EmailFrom 'IT ServiceDesk <servicedesk@contoso.com>' -HelpDeskPhone '(555) 555-5555' -ImagePath 'https://www.contoso.com/notices' -Install -DaysToWarn 7 -Credential $MyCred

    .\New-ADPasswordReminder.ps1 -Company 'Contoso' -PasswordChangeURL 'https://sso.contoso.com/adfs/portal/updatepassword/' -EmailServer 'smtprelay.contoso.com' -EmailFrom 'IT ServiceDesk <servicedesk@contoso.com>' -HelpDeskPhone '(555) 555-5555' -ImagePath 'https://www.contoso.com/notices' -Install -DaysToWarn 3 -Alert -Credential $MyCred
    
    .\New-ADPasswordReminder.ps1 -Company 'Contoso' -PasswordChangeURL 'https://sso.contoso.com/adfs/portal/updatepassword/' -EmailServer 'smtprelay.contoso.com' -EmailFrom 'IT ServiceDesk <servicedesk@contoso.com>' -HelpDeskPhone '(555) 555-5555' -ImagePath 'https://www.contoso.com/notices' -Install -DaysToWarn 1 -Alert -Credential $MyCred

    Description
    --------------
    Create a new scheduled task that will send a warning notice on a daily basis to users that have passwords that will expire in 7 days then again in 3 days. Also, create another similar task that will send an alert to users that have one more day to change their passwords.

#> 

[CmdletBinding(SupportsPaging = $True, DefaultParametersetName='Default')]
param(
    [parameter(HelpMessage='List users who would be sent notifications but do not send them.', ParameterSetName='Demo')]
    [switch]$Demo,
    
    [parameter(HelpMessage='Extract embedded gifs used in the email notification. These should be served publicly.', ParameterSetName='ExtractGifs')] 
    [switch]$ExtractGifs,
    
    [parameter(HelpMessage='Install this script with the passed parameters as a scheduled task.', ParameterSetName='Install')]
    [switch]$Install,
    
    [parameter(HelpMessage='Credentials used for scheduled task. Needs only have AD read access and ability to run as a batch job locally.', ParameterSetName='Install')]
    [System.Management.Automation.PSCredential]$Credential = $null,

    [parameter(HelpMessage='Attempts to assign the login as batch job rights', ParameterSetName='Install')]
    [switch]$SetupRunAsBatch,

    [parameter(HelpMessage='Test processing on a single user account.', ParameterSetName='Default')]
    [parameter(ParameterSetName='Install')]
    [string]$PreviewUser,
    
    [parameter(Mandatory=$true, HelpMessage='Days before password needs to change', ParameterSetName='Default')]
    [parameter(ParameterSetName='Install')]
    [parameter(ParameterSetName='Demo')] 
    [int]$DaysToWarn,

    [parameter(HelpMessage='Send the notice as an alert (red) instead of a warning (yellow)', ParameterSetName='Default')]
    [parameter(ParameterSetName='Install')] 
    [switch]$Alert,

    [parameter(HelpMessage='Use this switch to send notices if the expiration date is less than or equal to the days to warn. Default is to only send a notice if the DaysToWarn is equal to the expiration date.', ParameterSetName='Default')]
    [parameter(ParameterSetName='Install')]
    [parameter(ParameterSetName='Demo')]
    [switch]$LooseMatching,

    [parameter(HelpMessage='Surpress a final notice warning banner if the password is due to be changed in a day.', ParameterSetName='Default')]
    [parameter(ParameterSetName='Install')] 
    [switch]$SurpressFinalNotice,

    [parameter(HelpMessage='Can be used to filter checked user accounts to a specific organizational unit. Defaults to entire domain.', ParameterSetName='Default')]
    [parameter(ParameterSetName='Install')]
    [string]$OU,

    [parameter(Mandatory = $true, HelpMessage = 'Your company name.', ParameterSetName='Default')]
    [parameter(Mandatory=$True, ParameterSetName='Install')]
    [string]$Company,

    [parameter(Mandatory = $true, HelpMessage = 'This can be an owa password change url or possibly an sso password change url', ParameterSetName='Default')]
    [parameter(Mandatory=$True, ParameterSetName='Install')]
    [string]$PasswordChangeURL,

    [parameter(Mandatory=$True, HelpMessage = 'Your email relay', ParameterSetName='Default')]
    [parameter(Mandatory=$True, ParameterSetName='Install')]
    [string]$EmailServer,

    [parameter(Mandatory=$True, HelpMessage = 'Where the email is seen to come from', ParameterSetName='Default')]
    [parameter(Mandatory=$True, ParameterSetName='Install')]
    [string]$EmailFrom,

    [parameter(HelpMessage = 'Your helpdesk phone number. Leave blank to exlcude from email notifications', ParameterSetName='Default')]
    [parameter(ParameterSetName='Install')]
    [string]$HelpDeskPhone = '',

    [parameter(HelpMessage = 'Web URL of your helpdesk system. Leave blank to exclude from email notifications.', ParameterSetName='Default')]
    [parameter(ParameterSetName='Install')]
    [string]$HelpDeskURL = '',

    [parameter(HelpMessage = 'Below path should be accessible by ALL users who may receive emails. This includes external/mobile users. Leave blank to send emails without images.', ParameterSetName='Default')]
    [parameter(ParameterSetName='Install')]
    [string]$ImagePath
)

if ($Alert) {
    $NotificationType = 'Alert'
}
Else {
    $NotificationType = 'Warning'
}
$TaskName = "AD Password Expiration Notification ($DaysToWarn Day $NotificationType)"
$TaskDesc = "Send a password change $NotificationType $DaysToWarn before it expires"
if ($LooseMatching) {
    $TaskDesc += " and every day thereafter until it has been updated"
}

# Change the following to alter the format of the date in the emails sent
# See http://technet.microsoft.com/en-us/library/ee692801.aspx for more info
$DateFormat = "d"

# If we are in 'alert' mode then the notification header/footer will be red, otherwise it will be yellow
if ($Alert) {
    $AlertLevel = 'red'
}
else {
    $AlertLevel = 'yellow'
}

$Script:UsersNotified = 0
$Script:UserIDsNotified = @()

function New-ScheduledPowershellTask {
    <#
    .SYNOPSIS
    Create a scheduled task.
    .DESCRIPTION
    Create a scheduled task.
    .PARAMETER TaskName
    Name of the task to create in task scheduler
    .PARAMETER 

    .LINK
    http://www.the-little-things.net
    .LINK
    https://github.com/zloeber/Powershell/
    .NOTES
    Last edit   :   
    Version     :   
    Author      :   Zachary Loeber

    .EXAMPLE

    Description
    -----------
    TBD
    #>
    [CmdLetBinding()]
    param(
        [Parameter(Position=0, HelpMessage='Task name. If not set a random GUID will be used for the task name.')]
        [string]$TaskName,
        [Parameter(Position=1, HelpMessage='Task folder (in task manager).')]
        [string]$TaskFolder = '\',
        [Parameter(Position=2, HelpMessage='Task description.')]
        [string]$TaskDescription,
        [Parameter(Position=3, HelpMessage='Task frequency (2 = daily, 3 = weekly).')]
        [int]$TaskFrequency = 2,
        [Parameter(Position=4, HelpMessage='Task days to run if freqency is set to weekly.')]
        [int]$TaskDaysOfWeek = 0,
        [Parameter(Position=5, HelpMessage='User to run the task as. If not set then it will run as the current logged in user.')]
        [string]$TaskUser,
        [Parameter(Position=6, HelpMessage='Password of user running the task.')]
        [string]$TaskPassword,
        [Parameter(Position=7, HelpMessage='Task login type. Should be TASK_LOGON_PASSWORD if you are passing credentials. Otherwise defaults to TASK_LOGON_SERVICE_ACCOUNT.')]
        [ValidateSet('TASK_LOGON_NONE','TASK_LOGON_PASSWORD','TASK_LOGON_INTERACTIVE_TOKEN','TASK_LOGON_SERVICE_ACCOUNT')]
        [string]$TaskLoginType = 'TASK_LOGON_SERVICE_ACCOUNT',
        [Parameter(Position=8, HelpMessage='Task script.')]
        [string]$TaskScript,
        [Parameter(Position=8, HelpMessage='Path to run the scheduled task within.')]
        [string]$TaskRunPath,
        [Parameter(Position=9, HelpMessage='Powershell arguments.')]
        [string]$PowershellArgs = '-WindowStyle Hidden -NonInteractive -Executionpolicy unrestricted -NoProfile',
        [Parameter(Position=10, HelpMessage='Task Script Arguments.')]
        [string]$TaskScriptArgs,
        [Parameter(Position=11, HelpMessage='Task Start Time (defaults to 3AM tonight).')]
        [datetime]$TaskStartTime = $(Get-Date "$(((Get-Date).AddDays(1)).ToShortDateString()) 3:00 AM")
    )
    begin {
        # The Task Action command
        $TaskCommand = "c:\windows\system32\WindowsPowerShell\v1.0\powershell.exe"

        # The Task Action command argument
        $TaskArg = "$PowershellArgs `"& `'$TaskScript`' $TaskScriptArgs`""
        
        switch ($TaskLoginType) {
            'TASK_LOGON_NONE' { $_TaskLoginType = 0 }
            'TASK_LOGON_PASSWORD' { $_TaskLoginType = 1 }
            'TASK_LOGON_INTERACTIVE_TOKEN' { $_TaskLoginType = 3 }
            default { $_TaskLoginType = 5 }
        }
 
    }
    process {}
    end {
        try {
            # attach the Task Scheduler com object
            $service = new-object -ComObject('Schedule.Service')
            # connect to the local machine. 
            # http://msdn.microsoft.com/en-us/library/windows/desktop/aa381833(v=vs.85).aspx
            $service.Connect()
            $rootFolder = $service.GetFolder($TaskFolder)
             
            $TaskDefinition = $service.NewTask(0) 
            $TaskDefinition.RegistrationInfo.Description = "$TaskDescription"
            $TaskDefinition.Settings.Enabled = $true
            $TaskDefinition.Settings.AllowDemandStart = $true
             
            $triggers = $TaskDefinition.Triggers
            #http://msdn.microsoft.com/en-us/library/windows/desktop/aa383915(v=vs.85).aspx
            $trigger = $triggers.Create($TaskFrequency)
            $trigger.StartBoundary = $TaskStartTime.ToString("yyyy-MM-dd'T'HH:mm:ss")
            $trigger.Enabled = $true
            if ($TaskFrequency -eq 3) {
                $trigger.DaysOfWeek = [Int16]$TaskDaysOfWeek
            }
             
            # http://msdn.microsoft.com/en-us/library/windows/desktop/aa381841(v=vs.85).aspx
            $Action = $TaskDefinition.Actions.Create(0)
            $action.Path = "$TaskCommand"
            $action.Arguments = "$TaskArg"
            if ($TaskRunPath) {
                $Action.WorkingDirectory = $TaskRunPath
            }

            #http://msdn.microsoft.com/en-us/library/windows/desktop/aa381365(v=vs.85).aspx
            $null = $rootFolder.RegisterTaskDefinition("$TaskName",$TaskDefinition,6,$TaskUser,$TaskPassword,$_TaskLoginType)
        }
        catch {
            throw
        }
    }
}

Function Add-UserToLocalSecurityRight {
    <#
    .SYNOPSIS
    When run administratively this will add a user to the local system's login local rights security policy.
    .DESCRIPTION
    When run administratively this will add a user to the local system's login local rights security policy.
    .PARAMETER UserID
    User ID to add to the local system's login local rights security policy.
    .PARAMETER LocalRight
    Local right to grant. Either 'LogonAsBatch' or 'LogonLocal'
    .LINK
    http://www.the-little-things.net   
    .NOTES
    Version:
        1.0.0 - Initial release
        1.0.1 - Updated to include logon local right and parameter to select the right to assign.
    Author:
        Zachary Loeber
    Respect: 
        Code mildy modified from 
        http://www.morgantechspace.com/2014/03/Set-Logon-as-batch-job-rights-to-User-by-Powershell-CSharp-CMD.html

    .EXAMPLE
    Add-UserToLoginAsBatch 'test.user' -LogonRight 'LogonAsBatch'

    Description
    -----------
    Adds the local user test.user to the login as batch job rights on the local machine.
    #>
    [CmdletBinding()]
    param(
        [parameter()]
        [string]$UserID,
        [parameter()]
        [ValidateSet('LogonAsBatch','LogonLocal')]
        [string]$LocalRight = 'LogonAsBatch'
    )
    
    $CSharpCode = @'
    using System;
    // using System.Globalization;
    using System.Text;
    using System.Runtime.InteropServices;
    public class LsaWrapper
    {
    // Import the LSA functions
     
    [DllImport("advapi32.dll", PreserveSig = true)]
    private static extern UInt32 LsaOpenPolicy(
        ref LSA_UNICODE_STRING SystemName,
        ref LSA_OBJECT_ATTRIBUTES ObjectAttributes,
        Int32 DesiredAccess,
        out IntPtr PolicyHandle
        );
     
    [DllImport("advapi32.dll", SetLastError = true, PreserveSig = true)]
    private static extern long LsaAddAccountRights(
        IntPtr PolicyHandle,
        IntPtr AccountSid,
        LSA_UNICODE_STRING[] UserRights,
        long CountOfRights);
     
    [DllImport("advapi32")]
    public static extern void FreeSid(IntPtr pSid);
     
    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true, PreserveSig = true)]
    private static extern bool LookupAccountName(
        string lpSystemName, string lpAccountName,
        IntPtr psid,
        ref int cbsid,
        StringBuilder domainName, ref int cbdomainLength, ref int use);
     
    [DllImport("advapi32.dll")]
    private static extern bool IsValidSid(IntPtr pSid);
     
    [DllImport("advapi32.dll")]
    private static extern long LsaClose(IntPtr ObjectHandle);
     
    [DllImport("kernel32.dll")]
    private static extern int GetLastError();
     
    [DllImport("advapi32.dll")]
    private static extern long LsaNtStatusToWinError(long status);
     
    // define the structures
     
    private enum LSA_AccessPolicy : long
    {
        POLICY_VIEW_LOCAL_INFORMATION = 0x00000001L,
        POLICY_VIEW_AUDIT_INFORMATION = 0x00000002L,
        POLICY_GET_PRIVATE_INFORMATION = 0x00000004L,
        POLICY_TRUST_ADMIN = 0x00000008L,
        POLICY_CREATE_ACCOUNT = 0x00000010L,
        POLICY_CREATE_SECRET = 0x00000020L,
        POLICY_CREATE_PRIVILEGE = 0x00000040L,
        POLICY_SET_DEFAULT_QUOTA_LIMITS = 0x00000080L,
        POLICY_SET_AUDIT_REQUIREMENTS = 0x00000100L,
        POLICY_AUDIT_LOG_ADMIN = 0x00000200L,
        POLICY_SERVER_ADMIN = 0x00000400L,
        POLICY_LOOKUP_NAMES = 0x00000800L,
        POLICY_NOTIFICATION = 0x00001000L
    }
     
    [StructLayout(LayoutKind.Sequential)]
    private struct LSA_OBJECT_ATTRIBUTES
    {
        public int Length;
        public IntPtr RootDirectory;
        public readonly LSA_UNICODE_STRING ObjectName;
        public UInt32 Attributes;
        public IntPtr SecurityDescriptor;
        public IntPtr SecurityQualityOfService;
    }
     
    [StructLayout(LayoutKind.Sequential)]
    private struct LSA_UNICODE_STRING
    {
        public UInt16 Length;
        public UInt16 MaximumLength;
        public IntPtr Buffer;
    }
    /// 
    //Adds a privilege to an account
     
    /// Name of an account - "domain\account" or only "account"
    /// Name of the privilege
    /// The windows error code returned by LsaAddAccountRights
    public long SetRight(String accountName, String privilegeName)
    {
        long winErrorCode = 0; //contains the last error
     
        //pointer an size for the SID
        IntPtr sid = IntPtr.Zero;
        int sidSize = 0;
        //StringBuilder and size for the domain name
        var domainName = new StringBuilder();
        int nameSize = 0;
        //account-type variable for lookup
        int accountType = 0;
     
        //get required buffer size
        LookupAccountName(String.Empty, accountName, sid, ref sidSize, domainName, ref nameSize, ref accountType);
     
        //allocate buffers
        domainName = new StringBuilder(nameSize);
        sid = Marshal.AllocHGlobal(sidSize);
     
        //lookup the SID for the account
        bool result = LookupAccountName(String.Empty, accountName, sid, ref sidSize, domainName, ref nameSize,
                                        ref accountType);
     
        //say what you're doing
        Console.WriteLine("LookupAccountName result = " + result);
        Console.WriteLine("IsValidSid: " + IsValidSid(sid));
        Console.WriteLine("LookupAccountName domainName: " + domainName);
     
        if (!result)
        {
            winErrorCode = GetLastError();
            Console.WriteLine("LookupAccountName failed: " + winErrorCode);
        }
        else
        {
            //initialize an empty unicode-string
            var systemName = new LSA_UNICODE_STRING();
            //combine all policies
            var access = (int) (
                                    LSA_AccessPolicy.POLICY_AUDIT_LOG_ADMIN |
                                    LSA_AccessPolicy.POLICY_CREATE_ACCOUNT |
                                    LSA_AccessPolicy.POLICY_CREATE_PRIVILEGE |
                                    LSA_AccessPolicy.POLICY_CREATE_SECRET |
                                    LSA_AccessPolicy.POLICY_GET_PRIVATE_INFORMATION |
                                    LSA_AccessPolicy.POLICY_LOOKUP_NAMES |
                                    LSA_AccessPolicy.POLICY_NOTIFICATION |
                                    LSA_AccessPolicy.POLICY_SERVER_ADMIN |
                                    LSA_AccessPolicy.POLICY_SET_AUDIT_REQUIREMENTS |
                                    LSA_AccessPolicy.POLICY_SET_DEFAULT_QUOTA_LIMITS |
                                    LSA_AccessPolicy.POLICY_TRUST_ADMIN |
                                    LSA_AccessPolicy.POLICY_VIEW_AUDIT_INFORMATION |
                                    LSA_AccessPolicy.POLICY_VIEW_LOCAL_INFORMATION
                                );
            //initialize a pointer for the policy handle
            IntPtr policyHandle = IntPtr.Zero;
     
            //these attributes are not used, but LsaOpenPolicy wants them to exists
            var ObjectAttributes = new LSA_OBJECT_ATTRIBUTES();
            ObjectAttributes.Length = 0;
            ObjectAttributes.RootDirectory = IntPtr.Zero;
            ObjectAttributes.Attributes = 0;
            ObjectAttributes.SecurityDescriptor = IntPtr.Zero;
            ObjectAttributes.SecurityQualityOfService = IntPtr.Zero;
     
            //get a policy handle
            uint resultPolicy = LsaOpenPolicy(ref systemName, ref ObjectAttributes, access, out policyHandle);
            winErrorCode = LsaNtStatusToWinError(resultPolicy);
     
            if (winErrorCode != 0)
            {
                Console.WriteLine("OpenPolicy failed: " + winErrorCode);
            }
            else
            {
                //Now that we have the SID an the policy,
                //we can add rights to the account.
     
                //initialize an unicode-string for the privilege name
                var userRights = new LSA_UNICODE_STRING[1];
                userRights[0] = new LSA_UNICODE_STRING();
                userRights[0].Buffer = Marshal.StringToHGlobalUni(privilegeName);
                userRights[0].Length = (UInt16) (privilegeName.Length*UnicodeEncoding.CharSize);
                userRights[0].MaximumLength = (UInt16) ((privilegeName.Length + 1)*UnicodeEncoding.CharSize);
     
                //add the right to the account
                long res = LsaAddAccountRights(policyHandle, sid, userRights, 1);
                winErrorCode = LsaNtStatusToWinError(res);
                if (winErrorCode != 0)
                {
                    Console.WriteLine("LsaAddAccountRights failed: " + winErrorCode);
                }
     
                LsaClose(policyHandle);
            }
            FreeSid(sid);
        }
     
        return winErrorCode;
    }
    }
    
    public class AddUserLocalRight
    {
        public static void GrantUserLogonAsBatchJob(string userName)
        {
            try
            {
                LsaWrapper lsaUtility = new LsaWrapper();
         
                lsaUtility.SetRight(userName, "SeBatchLogonRight");
         
                Console.WriteLine("Logon as batch job right is granted successfully to " + userName);
            }            
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        public static void GrantUserLogonLocal(string userName)
        {
            try
            {
                LsaWrapper lsaUtility = new LsaWrapper();
         
                lsaUtility.SetRight(userName, "SeInteractiveLogonRight");
         
                Console.WriteLine("Logon local right is granted successfully to " + userName);
            }            
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
'@
    try {
        Add-Type -ErrorAction Stop -Language:CSharpVersion3 -TypeDefinition $CSharpCode
    }
    catch {
        Write-Error $_.Exception.Message
        break
    }
    if ($LocalRight -eq 'LogonAsBatch') {
        [AddUserLocalRight]::GrantUserLogonAsBatchJob($UserID)
    }
    if ($LocalRight -eq 'LogonLocal') {
        [AddUserLocalRight]::GrantUserLogonLocal($UserID)
    }
}

$ScriptName = $MyInvocation.MyCommand.Name
$ScriptPathAndName = $MyInvocation.MyCommand.Definition

if ($install){
    Write-Output "..Attempting to setup a scheduled task"
    
    # First lets collect all the used parameters and recreate the flags we passed to the script
    $UnusedParams = @('Install','Demo','Credential')
    $ParameterString = ''
    $MyParams = $PSCmdlet.MyInvocation.BoundParameters 
    $MyParams.Keys | Where {$UnusedParams -notcontains $_} | ForEach {
        Write-Verbose "..Adding parameter $($_)"
        $ParamName = $_
        $ParamType = $MyParams[$_].GetType().Name
        $ParamValue = $MyParams[$_]
        switch ($ParamType) {
            'SwitchParameter' {
                $ParameterString += " -$($ParamName)"
            }
            default {
                $AddQuotes = ''
                if ($ParamType -eq 'String') {
                    $AddQuotes = "'"
                }
                $ParameterString += " -$($ParamName) $($AddQuotes)$($ParamValue)$($AddQuotes)"
            }
        }
    }
    # Install the scheduled task with the parameters that were passed.
   if ($Credential -eq $null) {
       $Credential = Get-Credential("$env:userdnsdomain\$env:username")
   }
   $TaskPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($Credential.Password))

   if ($SetupRunAsBatch) {
       try {
           Add-UserToLocalSecurityRight -UserID $Credential.UserName -LocalRight 'LogonAsBatch'
           Write-Output "Added $($Credential.UserName) to the local logon as batch job rights."
       }
       catch {
           Write-Warning "Wasn't able to add $($Credential.UserName) to the local logon as batch job rights!"
       }
        try {
           Add-UserToLocalSecurityRight -UserID $Credential.UserName -LocalRight 'LogonLocal'
           Write-Output "Added $($Credential.UserName) to the allow local logon rights."
       }
       catch {
           Write-Warning "Wasn't able to add $($Credential.UserName) to the local logon rights!"
       }
   }

    $ScheduledTaskParams = @{
        'TaskName' = $TaskName
        'TaskDescription' = $TaskDesc
        'TaskUser' = $Credential.UserName
        'TaskPassword' = $TaskPassword
        'TaskScriptArgs' = $ParameterString
        'TaskLoginType' = 'TASK_LOGON_PASSWORD'
        'TaskScript' = $ScriptPathAndName
    }

    try {
        New-ScheduledPowershellTask @ScheduledTaskParams
        Write-Output "Task has been scheduled to run at 3AM every day"
    }
    catch {
        Write-Output "Uh Oh, we ran into an issue scheduling this script to run via task scheduler :("
    }
    Exit
}

function ExtractEmbeddedGifs {
    $decode_footer_red= ""
    $decode_footer_yellow= "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"
    $decode_header_red= ""
    $decode_header_yellow= "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"
    $decode_image001b= "R0lGODlhJAAcAEAAACH5BAAAAAAALAAAAAAkABwAhwAAAAAAMwAAZgAAmQAAzAAA/wArAAArMwArZgArmQArzAAr/wBVAABVMwBVZgBVmQBVzABV/wCAAACAMwCAZgCAmQCAzACA/wCqAACqMwCqZgCqmQCqzACq/wDVAADVMwDVZgDVmQDVzADV/wD/AAD/MwD/ZgD/mQD/zAD//zMAADMAMzMAZjMAmTMAzDMA/zMrADMrMzMrZjMrmTMrzDMr/zNVADNVMzNVZjNVmTNVzDNV/zOAADOAMzOAZjOAmTOAzDOA/zOqADOqMzOqZjOqmTOqzDOq/zPVADPVMzPVZjPVmTPVzDPV/zP/ADP/MzP/ZjP/mTP/zDP//2YAAGYAM2YAZmYAmWYAzGYA/2YrAGYrM2YrZmYrmWYrzGYr/2ZVAGZVM2ZVZmZVmWZVzGZV/2aAAGaAM2aAZmaAmWaAzGaA/2aqAGaqM2aqZmaqmWaqzGaq/2bVAGbVM2bVZmbVmWbVzGbV/2b/AGb/M2b/Zmb/mWb/zGb//5kAAJkAM5kAZpkAmZkAzJkA/5krAJkrM5krZpkrmZkrzJkr/5lVAJlVM5lVZplVmZlVzJlV/5mAAJmAM5mAZpmAmZmAzJmA/5mqAJmqM5mqZpmqmZmqzJmq/5nVAJnVM5nVZpnVmZnVzJnV/5n/AJn/M5n/Zpn/mZn/zJn//8wAAMwAM8wAZswAmcwAzMwA/8wrAMwrM8wrZswrmcwrzMwr/8xVAMxVM8xVZsxVmcxVzMxV/8yAAMyAM8yAZsyAmcyAzMyA/8yqAMyqM8yqZsyqmcyqzMyq/8zVAMzVM8zVZszVmczVzMzV/8z/AMz/M8z/Zsz/mcz/zMz///8AAP8AM/8AZv8Amf8AzP8A//8rAP8rM/8rZv8rmf8rzP8r//9VAP9VM/9VZv9Vmf9VzP9V//+AAP+AM/+AZv+Amf+AzP+A//+qAP+qM/+qZv+qmf+qzP+q///VAP/VM//VZv/Vmf/VzP/V////AP//M///Zv//mf//zP///wAAAAAAAAAAAAAAAAj/APcJHDiQ3jBwtVy5wlbL1jB6A9stnIiN4kKCBW25+obtm0eP3rK5sgVxHz2LFVO6wrhv2MaPHmvB/ObNVa+BKClirJVtpkxw32TC9GZL4EmVKgnaglnOIzh6EM15lPoNnLdaAiUivSiQl7ePtsohLLlPGVOgr4QJBDexrVFX4HaBK0f1m7KB+mxJNbdUrCt3JlFiEyh0LlCptcjSCzr3296gWS2udFfLsNhyvDzeFGh2rjlwmRHf3VdRZ+ZvvMCZq/V5tbmBvYLuFXu66L5a2JLWYn35M92q0Lo6/px6L0J9+yRSpHxYL+q5S0tWLhfWsdjVtQBrndiOlrnUmM2J/wf9jZhJ16q/g/5cq11ZpMNezZxJy338mPO/uRom0GI7abmlhJQ0RZmzUIACLoSKe/QgRQ8qBwLoCoC5bbSPLRJWROGBrrhHjEVHUVRhSgsmhOCIKd3VDlK3oaKSRdIoFKNCNKokDVb78NLWYNvltB897dTiYoAUocLfPvoltQ+EFbmoEDYLRqQQhBNRKZA7KAnUy5NcuoLKa1dK9iQvAnmz1UBCuiLSK2310o5LNL5SkUg4KseiUaVNxKaTXmIjZ1uoQFTPVhURpIyLbKZkopq0KJSoK9LlNBhB9OC20StCfsOmnK9kU9ErJQ0zokUsXdhnSBsxpBKZkRHKFUv1CB6TJpRN1iJMPQOJuiOppRZkEC/DtEOWQMTEuBVFAQEAOw=="
    $decode_image005b= "R0lGODlhDgAcAEAAACH5BAAAAAAALAAAAAAOABwAhwAAAAAAMwAAZgAAmQAAzAAA/wArAAArMwArZgArmQArzAAr/wBVAABVMwBVZgBVmQBVzABV/wCAAACAMwCAZgCAmQCAzACA/wCqAACqMwCqZgCqmQCqzACq/wDVAADVMwDVZgDVmQDVzADV/wD/AAD/MwD/ZgD/mQD/zAD//zMAADMAMzMAZjMAmTMAzDMA/zMrADMrMzMrZjMrmTMrzDMr/zNVADNVMzNVZjNVmTNVzDNV/zOAADOAMzOAZjOAmTOAzDOA/zOqADOqMzOqZjOqmTOqzDOq/zPVADPVMzPVZjPVmTPVzDPV/zP/ADP/MzP/ZjP/mTP/zDP//2YAAGYAM2YAZmYAmWYAzGYA/2YrAGYrM2YrZmYrmWYrzGYr/2ZVAGZVM2ZVZmZVmWZVzGZV/2aAAGaAM2aAZmaAmWaAzGaA/2aqAGaqM2aqZmaqmWaqzGaq/2bVAGbVM2bVZmbVmWbVzGbV/2b/AGb/M2b/Zmb/mWb/zGb//5kAAJkAM5kAZpkAmZkAzJkA/5krAJkrM5krZpkrmZkrzJkr/5lVAJlVM5lVZplVmZlVzJlV/5mAAJmAM5mAZpmAmZmAzJmA/5mqAJmqM5mqZpmqmZmqzJmq/5nVAJnVM5nVZpnVmZnVzJnV/5n/AJn/M5n/Zpn/mZn/zJn//8wAAMwAM8wAZswAmcwAzMwA/8wrAMwrM8wrZswrmcwrzMwr/8xVAMxVM8xVZsxVmcxVzMxV/8yAAMyAM8yAZsyAmcyAzMyA/8yqAMyqM8yqZsyqmcyqzMyq/8zVAMzVM8zVZszVmczVzMzV/8z/AMz/M8z/Zsz/mcz/zMz///8AAP8AM/8AZv8Amf8AzP8A//8rAP8rM/8rZv8rmf8rzP8r//9VAP9VM/9VZv9Vmf9VzP9V//+AAP+AM/+AZv+Amf+AzP+A//+qAP+qM/+qZv+qmf+qzP+q///VAP/VM//VZv/Vmf/VzP/V////AP//M///Zv//mf//zP///wAAAAAAAAAAAAAAAAh7ALHV+mau3b6DCBG6wuZqoStzCREynOjQYEKHFBlaPJgRo6tzCjtStOhRJMeSHg16dOhxn8iS7VB2NPeSoqtvDRnKXFhzZUeWE3tOrLWTIs2iC2MKdeUyp1OK7PbtdHiypruqKKMe3LlRqk2NETtqjejKW62CEdOqjRgQADs="
    $decode_spacer= "R0lGODlhAQABAIAAAAAAAAAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw=="
    $decode_spacer50= "R0lGODlhMgAyAIAAAP///wAAACH5BAEAAAAALAAAAAAyADIAAAIzhI+py+0Po5y02ouz3rz7D4biSJbmiabqyrbuC8fyTNf2jef6zvf+DwwKh8Si8YhMKicFADs="

    get-variable | Where {$_.Name -like 'decode_*'} | Foreach {
        $Outfile = ($_.Name -replace 'decode_','') + '.gif'
        $Content = [System.Convert]::FromBase64String($_.Value)
        if (-not (test-path $Outfile)) {
            Set-Content $OutFile -Value $Content -Encoding Byte
            Write-Output "    Created $Outfile"
        }
        else {
            Write-Output "    $Outfile already exists!"
        }
    }
}

if ($ExtractGifs){
    Write-Output 'Extracting the embedded gifs to the local directory'
    ExtractEmbeddedGifs
    Write-Output 'Please move the extracted files to a publicly accessible web URL so mobile devices will display notification emails properly.'
    exit
}

## Don't mess with any variables beyond this point except if you are looking to change the overall wording of the email.
$ImgageBase1 = @'
<tr>
    <td align="left" valign="top"><img src="{{ImagePath}}/spacer.gif" alt="Description: {{ImagePath}}/spacer.gif" width="46" height="28" align="absMiddle">
    </td>
</tr>
'@ -replace '{{ImagePath}}', $ImagePath
$ImageBase2 = @'
<td width="1" align="left" valign="top" bgcolor="#a8a9ad"><img src="{{ImagePath}}/spacer50.gif" alt="Description: {{ImagePath}}/spacer50.gif" width="1" height="50"></td>
'@ -replace '{{ImagePath}}', $ImagePath
$ImageBase3 = @'
 <td><img src="{{ImagePath}}/spacer.gif" alt="Description: {{ImagePath}}/spacer.gif" width="46" height="106"></td>
'@ -replace '{{ImagePath}}', $ImagePath
$ImageBase6 = @'
<table id="footer" border="0" cellspacing="0" cellpadding="0" width="655">
    <tr>
        <td><img src="{{ImagePath}}/footer_{{AlertLevel}}.gif" alt="Description: {{ImagePath}}/footer_{{AlertLevel}}.gif" width="655" height="81"></td>
    </tr>
</table>
'@ -replace '{{ImagePath}}', $ImagePath -replace '{{AlertLevel}}',$AlertLevel
$ImageBase7 = @'
<td align="left" valign="top"><img src="{{ImagePath}}/spacer.gif" alt="Description: {{ImagePath}}/spacer.gif" width="36" height="1"></td>
'@ -replace '{{ImagePath}}', $ImagePath
$ImageBase8 = @'
<td align="left" valign="top"><img src="{{ImagePath}}/spacer.gif" alt="Description: {{ImagePath}}/spacer.gif" width="36" height="1"></td>
'@ -replace '{{ImagePath}}', $ImagePath
$ImageBase9 = @'
<td align='left'><img border='0' width='14' height='28' src='{{ImagePath}}/image005b.gif' alt='Description: {{ImagePath}}/image005b.gif'></td>
'@ -replace '{{ImagePath}}', $ImagePath
$ImageBase10 = @'
<img src="{{ImagePath}}/header_{{AlertLevel}}.gif" border="0" alt="Description: {{ImagePath}}/header_{{AlertLevel}}.gif" width="655" height="121">
'@ -replace  '{{ImagePath}}', $ImagePath -replace '{{AlertLevel}}',$AlertLevel

$Image1 = ''
$Image2 = ''
$Image3 = ''
$Image6 = ''
$Image7 = ''
$Image8 = ''
$Image9 = ''
$Image10 = 'Helpdesk'
if ($ImagePath -ne '') {
    $Image1 = $ImageBase1
    $Image2 = $ImageBase2
    $Image3 = $ImageBase3
    $Image6 = $ImageBase6
    $Image7 = $ImageBase7
    $Image8 = $ImageBase8
    $Image9 = $ImageBase9
    $Image10 = $ImageBase10
}

$emailbody = @'
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    </head>
<body>
    <table id="email" border="0" cellspacing="0" cellpadding="0" width="655" align="center">
        {{Image1}}
        {{HelpDeskURL}}
        <tr>
            <td>
                <table id="body" border="0" cellspacing="0" cellpadding="0">
                    <tr>
                        {{Image2}}
                        {{Image3}}
                        <td id="text" width="572" align="left" valign="top" style="font-size: 12px; color: #000000; line-height: 17px; font-family: Verdana, Arial, Helvetica, sans-serif">

                        {{FinalNotice}}

                        <p style="font-weight: bold">Hello {{EmailName}},</p>
                        <p>It's change time again! Your {{Company}} password expires in <span style="background-color: red; color: white; font-weight: bold;">&nbsp;{{DaysTillExpire}}&nbsp;</span> day(s), on {{DateofExpiration}}.</p>
                        <p>Please use one of the methods below to update your password:</p>
                        <ol>
                            <li>{{Company}} office users: You may update your password on your computer by pressing Ctrl-Alt-Delete and selecting 'Change Password' from the available options. </li>
                            <li>{{Company}} affiliates and remote users: If you only access our email system, please use the following method to easily change your password:</li>
                            <ul>
                                <li>Log into <a href="{{PasswordChangeURL}}">the password update site</a> using Internet Explorer (PC) or Safari or Firefox (Mac).</li>
                                <li>Enter your {{Company}} email address</li>        
                                <li>Enter your current password, then your new password twice, and click &quot;Submit&quot; to change your password.</li>
                            </ul>
                        </ol>
						<p><span style="font-weight: bold">NOTE 1 - </span>You will now need to use your new password when logging into Outlook Web App, Outlook 2010/2013/2016, SharePoint, Mobile (ActiveSync) devices, etc.</p>
						<p><span style="font-weight: bold">NOTE 2 - </span>Please remember to update any mobile device wireless settings with your new password if they are being used to connect to the corporate wireless network.</p>
                        <p><span style="font-weight: bold">NOTE 3 - </span>Please remember to update any mobile device email settings with your new password if they are being used to retrieve corporate email.</p>

                        <p>Think your password couldn't easily be hacked? See how long it would take: <a href="http://howsecureismypassword.net/">How Secure Is My Password</a></p>
                        <p>Remember, if you do not change your password before it expires on {{DateofExpiration}}, you will be locked out of all {{Company}} Computer Systems until an Administrator unlocks your account.</p>

                        {{AccountPWP}}

                        <p>Thank you,<br />
                        The {{Company}} Service Desk<br />
                        {{HelpDeskPhone}}</p>

                        </td>
                        {{Image3}}
                        {{Image2}}
                    </tr>
                </table>
  
                {{Image6}}
                <table border="0" cellspacing="0" cellpadding="0" width="655" align="center">
                    <tr>
                        {{Image7}}
                        <td align="middle" valign="top">
                            <font face="Verdana" size="1" color="#000000">
                                <p>This email was sent by an automated process. If you would like to comment on it please send an email to {{EmailFrom}}</p>
                             </font>
                        </td>
                        {{Image8}}
					</tr>
				</table>
			</td>
		</tr>      
		</table>
    </body>
</html>
'@    -replace '{{EmailFrom}}', $EmailFrom `
        -replace '{{Company}}',$Company `
        -replace '{{PasswordChangeURL}}', $PasswordChangeURL `
        -replace '{{HelpDeskPhone}}', $HelpDeskPhone

$emailBodyAccountPWP = @"
        <table style="background-color: #dedede; border: 1px solid black">
            <tr>
                <td style="font-size: 12px; color: #000000; line-height: 17px; font-family: Verdana, Arial, Helvetica, sans-serif"><b>{{Company}} Password Policy</b>
                    <ul>
                        <li>You cannot use any of your prior {{PasswordHistory}} passwords.</li>
                        <li>Your password must have a minimum of a {{MinPasswordLength}} characters.</li>
                        <li>You may not use a previous password.</li>
                        <li>Your password must not contain parts of your first, last, or logon name.</li>
                        <li>Your password must be changed every {{PolicyDays}} days.</li>

                        {{PasswordComplexity}}
                    </ul>
                </td>
            </tr>
        </table>
"@                            

$emailbodyPasswordComplexity = @'
                        <li>Your password requires a minimum of 3 of the following 4 categories:</li>
                        <ul>
                            <li>Upper case characters (A-Z)</li>
                            <li>Lower case characters (a-z)</li>
                            <li>Numeric characters (0-9)</li>
                            <li>Special characters</li>                                
                        </ul>
'@

$emailBodyFinalNotice = @'
<div align='left'>
    <table border='0' cellspacing='0' cellpadding='0' style='width:510px; background-color: white; border: 0px;'>
        <tr>
            <td style="font-family: verdana; background: #E12C10; text-align: center; padding: 0px; font-size: 9.0pt; color: white">ALERT: You must change your password today or you will be locked out!</td>
            {{Image9}}
        </tr>
    </table>
</div>
'@

$emailbody = $emailbody -replace '{{Image1}}', $Image1 `
                                      -replace '{{Image2}}', $Image2 `
                                      -replace '{{Image3}}', $Image3 `
                                      -replace '{{Image6}}', $Image6 `
                                      -replace '{{Image7}}', $Image7 `
                                      -replace '{{Image8}}', $Image8

$emailBodyFinalNotice = $emailBodyFinalNotice -replace '{{Image9}}', $Image9

if ($HelpDeskURL -ne ''){
    $emailHelpDeskURL = '<tr><td height="121" align="left" valign="bottom"><a href="{{HelpDeskURL}}">{{Image10}}</a></td></tr>' `
                                    -replace '{{Image10}}', $Image10 `
                                    -replace '{{HelpdeskURL}}', $HelpDeskURL
}
else {
    $emailHelpDeskURL = '<tr><td height="121" align="left" valign="bottom">{{Image10}}</td></tr>' -replace '{{Image10}}', $Image10
}

$emailbody = $emailbody -replace '{{HelpDeskURL}}', $emailHelpDeskURL

if ($PreviewUser){
    $Preview = $true
    $RunMode = 'Preview'
}

function Set-ModuleStatus { 
    [cmdletBinding()]
    param    (
        [parameter(ValueFromPipeline = $true, Mandatory = $true, HelpMessage = "No module name specified!")] 
        [string]$name
    )
    if(-not (Get-Module -name "$name")) { 
        if(Get-Module -ListAvailable | ? {$_.name -eq "$name"}) { 
            Import-Module -Name "$name" 
            # module was imported
            return $true
        }
        else {
            # module was not available (Windows feature isn't installed)
            return $false
        }
    }
    else {
        # module was already imported
        return $true
    }
}

function Get-ADUserPasswordExpirationDate {
    [cmdletBinding()]
    Param (
        [Parameter(Mandatory = $true,ValueFromPipeline = $true, HelpMessage = "Identity of the Account")]
        [Object]$accountIdentity,
        [Parameter(HelpMessage = 'Anything other than Demo will generate notifications')]
        [string]$Mode = ''
    )
    Begin {
    }
    Process {
        Write-Verbose "..Getting the user info for $accountIdentity"
        $accountObj = Get-ADUser $accountIdentity -properties PasswordExpired, PasswordNeverExpires, PasswordLastSet, name, mail

        # Make sure the password is not expired, and the account is not set to never expire
        Write-Verbose "..verifying that the password is not expired, and the user is not set to PasswordNeverExpires"
        if (((-not ($accountObj.PasswordExpired)) -and (-not ($accountObj.PasswordNeverExpires))) -or ($PreviewUser)) {
            Write-Verbose "..Verifying if the date the password was last set is available"
            $passwordSetDate = $accountObj.PasswordLastSet
            if ($passwordSetDate -ne $null) {
                $maxPasswordAgeTimeSpan = $null
                # see if we're at Windows2008 domain functional level, which supports granular password policies
                if ($Script:DomainFunctionalLevel -ge 4) {
                    Write-Verbose "..Domain functional level greater than 2008"
                    # 2008 Domain functional level
                    $accountFGPP = Get-ADUserResultantPasswordPolicy $accountObj
                    if ($accountFGPP -ne $null) {
                        $maxPasswordAgeTimeSpan = $accountFGPP.MaxPasswordAge
                    }
                    else {
                        $maxPasswordAgeTimeSpan = (Get-ADDefaultDomainPasswordPolicy).MaxPasswordAge
                    }
                }
                else { 
                    # 2003 or ealier Domain Functional Level
                    Write-Verbose "..Domain functional level is 2003 or earlier"
                    $maxPasswordAgeTimeSpan = (Get-ADDefaultDomainPasswordPolicy).MaxPasswordAge
                }                
                if ($maxPasswordAgeTimeSpan -eq $null -or $maxPasswordAgeTimeSpan.TotalMilliseconds -ne 0) {
                    $DaysTillExpire = [math]::round(((New-TimeSpan -Start (Get-Date) -End ($passwordSetDate + $maxPasswordAgeTimeSpan)).TotalDays),0)
                    if ($Mode -eq 'Preview') {
                        $DaysTillExpire = 1
                    }

                    if (($LooseMatching -and ($DaysTillExpire -le $DaysToWarn)) -or ((-not $LooseMatching) -and ($DaysTillExpire -eq $DaysToWarn)) -or ($Mode -eq 'Preview')) {
                        Write-Verbose "...User should receive a notice"
                        $NotifyUser = $true

                        $PolicyDays = [math]::round((($maxPasswordAgeTimeSpan).TotalDays),0)
                        if ($Mode -eq 'demo')    {
                            Write-Host ("{0,-25}{1,-8}{2,-12}" -f $accountObj.Name, $DaysTillExpire, $PolicyDays)
                            return
                        }

                        $EmailName = $accountObj.Name                        
                        $DateofExpiration = (Get-Date).AddDays($DaysTillExpire)
                        $DateofExpiration = (Get-Date($DateofExpiration) -f $Script:DateFormat).ToString()

                        # start assembling email to user here
                        $newemailbody = $emailbody -replace '{{EmailName}}', $EmailName `
                                                                        -replace '{{DaysTillExpire}}', $DaysTillExpire `
                                                                        -replace '{{DateofExpiration}}', $DateofExpiration
                        if (($DaysTillExpire -le 1) -and (-not $SurpressFinalNotice)) {
                            $newemailbody = $newemailbody -replace '{{FinalNotice}}', $emailBodyFinalNotice
                        }
                        else {
                            $newemailbody = $newemailbody -replace '{{FinalNotice}}', ''
                        }

                        # Add password policy information
                        if ($accountFGPP -eq $null) {
                            $newemailBodyAccountPWP = $emailBodyAccountPWP 
                                                                                -replace '{{MinPasswordLength}}', $MinPasswordLength `
                                                                                -replace '{{PasswordHistory}}',$PasswordHistory `
                                                                                -replace '{{PolicyDays}}', $PolicyDays `
                                                                                -replace '{{Company}}', $Company
                            if ($PasswordComplexity){
                                Write-Verbose "..Password complexity found to be enabled!"
                                $newemailBodyAccountPWP = $newemailBodyAccountPWP -replace '{{PasswordComplexity}}', $emailbodyPasswordComplexity 
                            }
                            else {
                                $newemailBodyAccountPWP = $newemailBodyAccountPWP -replace '{{PasswordComplexity}}', ''
                            }
                            $newemailbody = $newemailbody -replace  '{{AccountPWP}}', $newemailBodyAccountPWP
                        }
                        else {
                            $newemailbody = $newemailbody -replace  '{{AccountPWP}}', ''
                        }

                        $emailto = $accountObj.mail
                        if ($emailto){
                            Write-Verbose "..Sending demo message to $emailto"
                            Send-MailMessage -To $emailto -Subject "Your password expires in $DaysTillExpire day(s)" -Body $newemailbody -From $EmailFrom -Priority High -BodyAsHtml -SmtpServer $EmailServer
                            $Script:UsersNotified++
                            $Script:UserIDsNotified += $emailto
                        }
                        else {
                            Write-Verbose "..Can not email this user. Email address is blank"
                        }
                    }
                    else {
                        $NotifyUser = $false
                        Write-Verbose  "...User should NOT receive a notice"
                    }
                }
            }
        }
	}
}

Write-Verbose "..Loading AD module"
if ((Set-ModuleStatus ActiveDirectory) -eq $false){
    Write-Warning "Active Directory module could not be importeded. Ensure that the RSAT-AD-Powershell feature is installed"
    Exit
}

Write-Verbose "..Getting Domain functional level"
$Script:DomainFunctionalLevel = (Get-AdDomain).DomainMode

if (-NOT $PreviewUser) {
    if (-not [string]::IsNullOrEmpty($ou)) {
        Write-Verbose "Filtering users to $ou"
        $users = Get-AdUser -ldapfilter '(!(name=*$))' -SearchScope subtree -SearchBase $ou -ResultSetSize $null
    }
	else {
        $users = Get-AdUser -ldapfilter '(!(name=*$))' -ResultSetSize $null
    }
}
else{
    Write-Verbose "Preview mode"
    try {
        $users = Get-AdUser $PreviewUser
    }
    catch {
        throw
    }
}

if ($demo) {
    Write-Verbose "...Demo mode"
    $WhatIfPreference = $true
    Write-Host "`n"
    Write-Host ("{0,-25}{1,-8}{2,-12}" -f "User", "Expires", "Policy") -ForegroundColor cyan
    Write-Host ("{0,-25}{1,-8}{2,-12}" -f "========================", "=======", "===========") -ForegroundColor cyan
}

Write-Verbose "...Setting event log configuration"
[object]$evt = new-object System.Diagnostics.EventLog("Application")
[string]$evt.Source = $ScriptName
$infoevent = [System.Diagnostics.EventLogEntryType]::Information
[string]$EventLogText = "Beginning processing`n`r" + $TaskName + "`n`r" + $TaskDesc

Write-Verbose "...Getting password policy configuration"
$DefaultDomainPasswordPolicy = Get-ADDefaultDomainPasswordPolicy
[int]$MinPasswordLength = $DefaultDomainPasswordPolicy.MinPasswordLength
# this needs to look for FGPP, and then default to this if it doesn't exist
[bool]$PasswordComplexity = $DefaultDomainPasswordPolicy.ComplexityEnabled
[int]$PasswordHistory = $DefaultDomainPasswordPolicy.PasswordHistoryCount

 if ($Demo) {
    $RunMode = 'Demo'
 }

ForEach ($user in $users){
    Write-verbose "...Processing user: $user"
    Get-ADUserPasswordExpirationDate $user.samaccountname -Mode $RunMode
}

# Write event log of actions taken
Write-Verbose "...Writing summary event log entry"
$EventLogText = "Finished processing $($Script:UsersNotified) account(s). `n`r" + $TaskName + "`n`r" + $TaskDesc + "`n`rThe users processed are as follows:`n`r" + ($Script:UserIDsNotified -join "`n`r")
$evt.WriteEntry($EventLogText,$infoevent,70)